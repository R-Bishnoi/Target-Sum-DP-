

// memoization 

class Solution {
  public:
  
  
  int solve(vector<int>&arr, vector<vector<int>>&dp,int sum,int i){
      
      if(i==0){
          if(sum==0 && arr[0]==sum)return 2;
          else if(sum==0 || arr[0]==sum)return 1;
          else return 0;
      }
      
  if(dp[i][sum]!=-1)return dp[i][sum];
  
  int not_take = solve(arr,dp,sum,i-1);
  int take=0;
  if(sum>=arr[i])take=solve(arr,dp,sum-arr[i],i-1);
  
  return dp[i][sum]=take+not_take;
      
      
  }
  
  
 int findTargetSumWays(vector<int>&arr ,int d) {
       int n=arr.size();
    
     
     int sum=0;
     for(int i=0;i<n;i++)
      sum+=arr[i];
     
    if((sum-d)%2!=0 || (sum-d)<0)return 0;
    
    sum=(sum-d)/2;
    
    vector<vector<int>>dp(n,vector<int>(sum+1,-1));
    
    return solve(arr,dp,sum,n-1);
       
       
    }    
};





// tabulation 

class Solution {
public:
        
int findTargetSumWays(vector<int>& arr, int d) {
  
    int sum=0;
    int n=arr.size();
    for(int i=0;i<n;i++)sum+=arr[i];
        
    if((sum-d)%2!=0 || (sum-d)<0)return 0;
    
    sum=(sum-d)/2;
    
    
vector<vector<int>>dp(n,vector<int>(sum+1,0));
    
    
if(arr[0]==0)dp[0][0]=2;
else dp[0][0]=1;
    
  
    //[0,0,0,0,0,0,0,0,1]   here if we not check arr[0]!=0 then it give us half ans because it not
    // consider sum==0 && arr[i]==0 wala case jha 2 return krna chaiye.
    
if(arr[0]!=0 && sum>=arr[0])dp[0][arr[0]]=1;    
    
   
 
    
for(int i=1;i<n;i++){
    for(int j=0;j<=sum;j++){
      
     int not_take=dp[i-1][j];
    
    int take=0;
        if(j>=arr[i])
        take=dp[i-1][j-arr[i]];
        
        
 dp[i][j]=take+not_take;
        
    }
}
    
    
 
    return dp[n-1][sum];
    
}
    
    
    
};




